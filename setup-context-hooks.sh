#!/bin/bash

# setup-context-hooks.sh - Set up context tracking hooks for Claude Code agent testing
# Run this in your agent-context-tests directory

set -e  # Exit on error

echo "üöÄ Setting up Context Tracking Hooks for Agent Testing"
echo "====================================================="

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in the right directory
if [ ! -f "README.md" ] || [ ! -d ".claude/agents" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: This doesn't look like the agent-context-tests directory${NC}"
    echo "Expected to find README.md and .claude/agents/"
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Create directories
echo -e "${BLUE}üìÅ Creating directory structure...${NC}"
mkdir -p .claude/hooks
mkdir -p .claude/test-results
mkdir -p .claude/context-logs

# Create the context flow tracking script
echo -e "${BLUE}üìù Creating context flow tracker...${NC}"
cat > .claude/hooks/track-context-flow.sh << 'SCRIPT_EOF'
#!/bin/bash
# track-context-flow.sh - Log context flow events for analysis

# Parse the JSON input from stdin
INPUT=$(cat)

# Extract key information
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
TOOL_NAME=$(echo "$INPUT" | jq -r '.tool_name // "unknown"')
SESSION_ID=$(echo "$INPUT" | jq -r '.session_id // "unknown"')
HOOK_EVENT=$(echo "$INPUT" | jq -r '.hook_event_name // "unknown"')

# Create context log directory if it doesn't exist
mkdir -p .claude/context-logs

# Log full event to JSONL file
CONTEXT_LOG=".claude/context-logs/context-flow.jsonl"
echo "$INPUT" | jq -c ". + {logged_at: \"$TIMESTAMP\", hook_event: \"$HOOK_EVENT\"}" >> "$CONTEXT_LOG"

# If this was a Task (subagent invocation), track it specially
if [ "$TOOL_NAME" = "Task" ]; then
    AGENT_NAME=$(echo "$INPUT" | jq -r '.tool_input.agent // .tool_input.agent_name // "unknown"')
    TASK_DESC=$(echo "$INPUT" | jq -r '.tool_input.task // .tool_input.description // "no description"' | head -n 1)
    
    AGENT_LOG=".claude/context-logs/agent-invocations.log"
    echo "[$(date -u +"%Y-%m-%d %H:%M:%S")] Agent invoked: $AGENT_NAME" >> "$AGENT_LOG"
    echo "  Task: $TASK_DESC" >> "$AGENT_LOG"
    echo "  Session: $SESSION_ID" >> "$AGENT_LOG"
    echo "" >> "$AGENT_LOG"
fi

# Log file operations for context passing analysis
if [[ "$TOOL_NAME" =~ ^(Read|Write|Edit)$ ]]; then
    FILE_PATH=$(echo "$INPUT" | jq -r '.tool_input.file_path // .tool_input.filePath // "unknown"')
    FILE_OPS_LOG=".claude/context-logs/file-operations.log"
    echo "[$(date -u +"%Y-%m-%d %H:%M:%S")] $TOOL_NAME: $FILE_PATH (Session: $SESSION_ID)" >> "$FILE_OPS_LOG"
fi

# Always exit successfully to not block Claude Code
exit 0
SCRIPT_EOF

# Create the auto-commit script
echo -e "${BLUE}üìù Creating auto-commit script...${NC}"
cat > .claude/hooks/commit-agent-results.sh << 'SCRIPT_EOF'
#!/bin/bash
# commit-agent-results.sh - Auto-commit test results when agents complete

# Parse input
INPUT=$(cat)
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
SESSION_ID=$(echo "$INPUT" | jq -r '.session_id // "unknown"')

# Check if we're in a git repo
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Not in a git repository - skipping commit" >&2
    exit 0
fi

# Wait a moment to ensure all file operations are complete
sleep 1

# Stage all test results and context logs
git add .claude/test-results/ 2>/dev/null || true
git add .claude/context-logs/ 2>/dev/null || true
git add .claude/context-flow.jsonl 2>/dev/null || true
git add .claude/agent-flow.log 2>/dev/null || true

# Also stage any test files that were created
git add tool-test-files/ 2>/dev/null || true

# Check if there are changes to commit
if ! git diff --cached --quiet; then
    # Count the changes
    FILES_CHANGED=$(git diff --cached --name-only | wc -l)
    
    # Create detailed commit message
    COMMIT_MSG="Auto-commit: Agent test completed - Session ${SESSION_ID:0:8}

Test results captured at $TIMESTAMP
Files changed: $FILES_CHANGED

Context tracking files:
- .claude/context-logs/context-flow.jsonl
- .claude/context-logs/agent-invocations.log
- .claude/context-logs/file-operations.log

[Generated by Claude Code context tracking hooks]"

    git commit -m "$COMMIT_MSG"
    
    echo "‚úÖ Committed test results for session ${SESSION_ID:0:8}"
    
    # Try to push if remote exists
    if git remote get-url origin > /dev/null 2>&1; then
        echo "üì§ Attempting to push to remote..."
        if git push origin HEAD 2>/dev/null; then
            echo "‚úÖ Pushed to remote successfully"
        else
            echo "‚ö†Ô∏è  Push failed - manual push required"
        fi
    fi
else
    echo "No changes to commit"
fi

exit 0
SCRIPT_EOF

# Create a session start hook for initialization
echo -e "${BLUE}üìù Creating session start hook...${NC}"
cat > .claude/hooks/session-start.sh << 'SCRIPT_EOF'
#!/bin/bash
# session-start.sh - Initialize context tracking for new session

TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
SESSION_LOG=".claude/context-logs/sessions.log"

mkdir -p .claude/context-logs

echo "=== New Context Testing Session Started ===" >> "$SESSION_LOG"
echo "Timestamp: $TIMESTAMP" >> "$SESSION_LOG"
echo "Working Directory: $(pwd)" >> "$SESSION_LOG"
echo "" >> "$SESSION_LOG"

# Create session marker
echo "Context testing session initialized at $TIMESTAMP" > .claude/test-results/session-marker.txt

exit 0
SCRIPT_EOF

# Make scripts executable
echo -e "${BLUE}üîß Making scripts executable...${NC}"
chmod +x .claude/hooks/*.sh

# Create or update Claude settings
echo -e "${BLUE}‚öôÔ∏è  Configuring Claude Code hooks...${NC}"
cat > .claude/settings.json << 'EOF'
{
  "hooks": {
    "SessionStart": [
      {
        "hooks": [{
          "type": "command",
          "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/session-start.sh"
        }]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Task|Read|Write|Edit",
        "hooks": [{
          "type": "command",
          "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/track-context-flow.sh",
          "timeout": 5
        }]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [{
          "type": "command",
          "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/commit-agent-results.sh",
          "timeout": 10
        }]
      }
    ],
    "Stop": [
      {
        "hooks": [{
          "type": "command",
          "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/commit-agent-results.sh",
          "timeout": 10
        }]
      }
    ]
  }
}
EOF

# Initialize git if needed
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${BLUE}üîß Initializing git repository...${NC}"
    git init
    
    # Create .gitignore if it doesn't exist
    if [ ! -f .gitignore ]; then
        cat > .gitignore << 'EOF'
# Claude Code
.claude/context-logs/*.jsonl
.claude/context-logs/*.log
.claude/test-results/*.json
!.claude/test-results/.gitkeep

# OS
.DS_Store
Thumbs.db

# Keep directories
!.claude/context-logs/.gitkeep
!.claude/test-results/.gitkeep
EOF
    fi
fi

# Create .gitkeep files to preserve empty directories
touch .claude/context-logs/.gitkeep
touch .claude/test-results/.gitkeep

# Create initial commit if this is a new repo
if [ -z "$(git log -1 --oneline 2>/dev/null)" ]; then
    echo -e "${BLUE}üì∏ Creating initial commit...${NC}"
    git add .
    git commit -m "Initial setup with context tracking hooks

- Added context flow tracking hooks
- Configured auto-commit on agent completion
- Set up comprehensive logging structure"
fi

# Create helper analysis script
echo -e "${BLUE}üìä Creating analysis helper script...${NC}"
cat > analyze-context-flow.sh << 'SCRIPT_EOF'
#!/bin/bash
# analyze-context-flow.sh - Analyze captured context flow data

echo "üìä Context Flow Analysis"
echo "======================="

if [ -f .claude/context-logs/context-flow.jsonl ]; then
    echo -e "\nüìã Total events logged: $(wc -l < .claude/context-logs/context-flow.jsonl)"
    
    echo -e "\nüîß Tool usage breakdown:"
    jq -r '.tool_name // "unknown"' .claude/context-logs/context-flow.jsonl | sort | uniq -c | sort -nr
fi

if [ -f .claude/context-logs/agent-invocations.log ]; then
    echo -e "\nü§ñ Agent invocations: $(grep -c "Agent invoked:" .claude/context-logs/agent-invocations.log)"
fi

if [ -f .claude/context-logs/file-operations.log ]; then
    echo -e "\nüìÅ File operations: $(wc -l < .claude/context-logs/file-operations.log)"
    echo "Recent operations:"
    tail -n 10 .claude/context-logs/file-operations.log
fi

echo -e "\nüìù Git commits created:"
git log --oneline --grep="Auto-commit: Agent test completed" 2>/dev/null | head -n 10
SCRIPT_EOF

chmod +x analyze-context-flow.sh

# Final summary
echo
echo -e "${GREEN}‚úÖ Context tracking hooks setup complete!${NC}"
echo
echo "üìÅ Created structure:"
echo "   .claude/hooks/           - Hook scripts"
echo "   .claude/context-logs/    - Context flow logs"
echo "   .claude/test-results/    - Test results"
echo
echo "üéØ Next steps:"
echo "1. If using GitHub:"
echo "   git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO.git"
echo "   git push -u origin main"
echo
echo "2. Start Claude Code in this directory to activate hooks"
echo
echo "3. Run your context tests - results will be auto-committed!"
echo
echo "4. Analyze results with: ./analyze-context-flow.sh"
echo
echo -e "${YELLOW}üí° Tip: Check git log after running tests to see the auto-commits${NC}"
